"""
    Note: Due to limitations imposed by the `maxfev` parameter in `scipy.optimize.curve_fit`, 
          this code is constrained to expanding the groundstate with only a few Gaussians. 
          For a more comprehensive basis, please refer to `gaussian_expansion_for_groundstate_tf.py`.

    This code expands the ground state of a hydrogen atom under the 3D soft Coulomb potential into a 3D-PTG basis. Specifically,

        ψ_groundstate(r) = Σ gi , (0 <= i < n_gaussians)

    where

        gi(x, y, z) = z^ni * e^(γi − αi(x^2 + y^2) − βi z^2)

    The parameters ni are set to 0, and σi = αi = βi due to the spherical symmetry of the ground state.
    γi and σi are obtained using `scipy.optimize.curve_fit`.

    The ground state is loaded from `soft_coulomb_potential_radial_solution.npz` generated by `groundstate_solver.py`.
    The results are stored in `groundstate_expansion_params.npz` with keys 'values_γ' and 'values_σ'.
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
import os

def load_data(filepath):
    """Load radial solution data from the specified .npz file."""
    data = np.load(filepath)
    return data['r'], data['y']

def gaussian_sum(r, *params):
    """Compute the sum of Gaussian functions."""
    n = len(params) // 2
    result = np.zeros_like(r)
    for i in range(n):
        a = params[2 * i]
        b = params[2 * i + 1]
        # Clip parameter values to prevent overflow
        if b > 100:
            print(f"Warning: b = {b} is too large, clipping to 100")
            b = 100
        if a < 0.01:
            print(f"Warning: a = {a} is too small, clipping to 0.01")
            a = 0.01            
        result += a ** 2 * np.exp(-b ** 2 * r ** 2)
    return result

def fit_gaussians(r, y, n_gaussians=4):
    """Fit the Gaussian sum to the data."""
    initial_guess = [1, 1] * n_gaussians
    bounds = (0, [np.inf] * n_gaussians * 2)
    params_opt, _ = curve_fit(gaussian_sum, r, y, p0=initial_guess, bounds=bounds)
    return params_opt

def save_results(params_opt, n_gaussians, filepath):
    """Save the optimized parameters and the fitted formula."""
    gaussian_params = {}
    formula_terms = []

    for i in range(n_gaussians):
        a = params_opt[2 * i]
        b = params_opt[2 * i + 1]
        gaussian_params[f'Gaussian {i+1}'] = {'γ': np.complex128(np.log(a ** 2)), 'σ': np.complex128(b ** 2)}
        formula_terms.append(f'{a:.14f} * exp(-{b:.14f} * r^2)')

    fitted_formula = " + ".join(formula_terms)

    # Convert dictionary data to NumPy arrays for storage
    keys = list(gaussian_params.keys())
    values_γ = np.array([gaussian_params[key]['γ'] for key in keys], dtype=np.complex128)
    values_σ = np.array([gaussian_params[key]['σ'] for key in keys], dtype=np.complex128)

    # Save to .npz file
    np.savez(filepath, keys=keys, values_γ=values_γ, values_σ=values_σ, formula=fitted_formula)

    return gaussian_params, fitted_formula

def plot_comparison(r, y, gaussian_values, n_gaussians):
    """Plot the comparison between the original data and the Gaussian sum expansion."""
    plt.figure(figsize=(10, 6))
    plt.plot(r, y, label='ψ_groundstate(r)', color='blue', lw=2)
    plt.plot(r, gaussian_values, label=f'Gaussian Sum (n={n_gaussians})', color='red', linestyle='--', lw=2)
    plt.xlabel('r')
    plt.ylabel('Function value')
    plt.title('Comparison between ψ_groundstate(r) and Gaussian Sum Expansion')
    plt.legend()
    plt.grid(True)
    plt.show()

def main():
    # Change to your path
    os.chdir('E:\\XUTTAI\\Desktop\\tdvp\\groundstate_generator')
    r, y = load_data('soft_coulomb_potential_radial_solution.npz')
    
    n_gaussians = 6
    params_opt = fit_gaussians(r, y, n_gaussians)
    
    gaussian_values = gaussian_sum(r, *params_opt)
    
    gaussian_params, fitted_formula = save_results(params_opt, n_gaussians, 'groundstate_expansion_params.npz')
    
    print("Optimized Parameters:")
    for key, value in gaussian_params.items():
        print(f"{key}: γ = {value['γ']}, σ = {value['σ']}")
    
    print("\nFitted Formula:")
    print(f'F(r) = {fitted_formula}')
    
    plot_comparison(r, y, gaussian_values, n_gaussians)
    
    groundstate_expansion_params = np.load('groundstate_expansion_params.npz')
    loaded_values_γ = groundstate_expansion_params['values_γ']
    loaded_values_σ = groundstate_expansion_params['values_σ']
    loaded_formula = groundstate_expansion_params['formula']
    
    print('Loaded γ values:', loaded_values_γ)
    print('Loaded σ values:', loaded_values_σ)
    print('Loaded Formula:', loaded_formula)
    print(len(r))

if __name__ == '__main__':
    main()